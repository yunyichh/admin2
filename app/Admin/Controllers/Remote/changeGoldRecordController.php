<?php

namespace App\Admin\Controllers\Remote;

use App\Remote\changeGoldRecord;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Show;
use Encore\Admin\Facades\Admin;
use Illuminate\Http\Request;

class changeGoldRecordController extends AdminController
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'App\Remote\changeGoldRecord';

    //gm(1),                      //gm发币
    //gm2(2)=>金币商出售订单单次处理
    //gm3(3)=>手工补单
    //bind_card(4)=>绑定或修改银行卡信息手续费
    //order(5)=>订单
    //buy_auction_num(6)=>购买竞拍次数
    //buy_item(7)=>竞拍物品
    //gm4(8)=>GM后台清除指定玩家身份认证信息费用
    //gm5(9)=>GM修改安全认证手机号费用
    //gm6(10)=>gm手工转出指定帐号超级冻结金币
    //bank_self(11)=>金库超级防护处理续费
    //modfiy_phone(12)=>修改手机号验证短信费用
    //self_lock(13)=>超级防护开通
    //shiming(14)=>变更实名费用
    //account_change_money(15)=>增加或减少帐号金币
    //create_account(16)=>创建账号初始金币
    //game_cost(17)=>游戏服消耗金币
    //week_game(18)=>周赛结束奖励
    //platfrom_login(19)=>平台登录初始金币
    //platfrom_up(20)=>平台上分
    //platfrom_low(21)=>平台下分
    //week_gamem_cost(22),        //周赛报名
    //give(23)=>给予玩家奖励
    //sign(24)=>签到奖励
    //match(25)=>匹配消耗

    protected $sourceTypes = [
        0 => '其他',
        1 => 'gm发币',
        2 => '金币商出售订单单次处理',
        3 => '手工补单',
        4 => '绑定或修改银行卡信息手续费',
        5 => '订单',
        6 => '购买竞拍次数',
        7 => '竞拍物品',
        8 => 'GM后台清除指定玩家身份认证信息费用',
        9 => 'GM修改安全认证手机号费用',
        10 => 'gm手工转出指定帐号超级冻结金币',
        11 => '金库超级防护处理续费',
        12 => '修改手机号验证短信费用',
        13 => '超级防护开通',
        14 => '变更实名费用',
        15 => '增加或减少帐号金币',
        16 => '创建账号初始金币',
        17 => '游戏服消耗金币',
        18 => '周赛结束奖励',
        19 => '平台登录初始金币',
        20 => '平台上分',
        21 => '平台下分',
        22 => '周赛报名',
        23 => '给予玩家奖励',
        24 => '签到奖励',
        25 => '匹配消耗',
        26 => 'gm发放金币',
        27 => '跟注',
        28 => '加注',
        29 => 'all in',
        30 => '游戏赢',
        31 => '周赛奖励',
        32 => '比赛发奖',
        33 => '进入游戏',
        34 => '站起',
        35 => '比赛报名',
        36 => '退出游戏',
        37 => '小盲',
        38 => '大盲',
    ];

    protected function title()
    {
        return _i('会员金币变化'); // TODO: Change the autogenerated stub
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new changeGoldRecord());
        $grid->disableCreateButton();
        $grid->disableColumnSelector();
        $grid->disableBatchActions();
        $grid->disableActions();
        $grid->actions(function ($action) {
            $action->disableEdit();
            $action->disableView();
            $action->disableDelete();
        });
        $grid->filter(function ($filter) {
            $filter->like('account.starNO', ___('gameId'));
            $filter->like('account.accountName', ___('accountName'));
            $filter->where(function ($query) {
                $time = strtotime($this->input) * 1000;
                $query->where('time', '>', $time);
            }, ___('startTimes'))->datetime();
            $filter->where(function ($query) {
                $time = strtotime($this->input) * 1000;
                $query->where('time', '<', $time);
            }, ___('endTimes'))->datetime();
        });


//        $grid->column('id', ___('Id'));

        $grid->model()->join('accountentity', 'accountentity.accountId', '=', 'changegoldrecordentity.accountId')->where('accountentity.robotFlag', 0)->whereNotIn('changegoldrecordentity.sourceType', [33, 36])->orderBy('changegoldrecordentity.time', 'desc');
        if (Admin::user()->inRoles(['agent'])) {
            $grid->model()->where('accountentity.recommended', Admin::user()->agentId);
        }
        $grid->column('starNO', ___('gameId'))->display(function () {
            $account = @$this->account['starNO'];
            return $account;
        });
        $grid->column('accountName', ___('accountName'))->display(function () {
            $account = @$this->account['accountName'];
            return $account;
        });
        $grid->column('oldMoney', ___('OldMoney'));

        $grid->column('changeMoney', ___('ChangeMoney'));
        $grid->column('nowMoney', ___('NowMoney'));

        $_this = $this;
        $grid->column('sourceType', ___('changeReason'))->display(function () use ($_this) {
            if (in_array($this->sourceType, [32, 35])) {
                $info = [
                    401 => '单桌',
                    402 => '双人桌'
                ];
                return @_i($info[json_decode($this->param, true)[0]] . $_this->sourceTypes[$this->sourceType]);
            } else {
                return @_i($_this->sourceTypes[$this->sourceType]);
            }
        });
        $grid->column('time', ___('Time'))->display(function ($time) {
            return date("Y-m-d H:i:s", (int)substr($time, 0, 10));
        })->sortable();

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(changeGoldRecord::findOrFail($id));

        $show->field('id', ___('Id'));
        $show->field('accountId', ___('AccountId'));
        $show->field('changeMoney', ___('ChangeMoney'));
        $show->field('nowMoney', ___('NowMoney'));
        $show->field('oldMoney', ___('OldMoney'));
        $show->field('source', ___('sourceReason'));
        $show->field('time', ___('Time'));

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new changeGoldRecord());

        $form->number('accountId', ___('AccountId'));
        $form->number('changeMoney', ___('ChangeMoney'));
        $form->number('nowMoney', ___('NowMoney'));
        $form->number('oldMoney', ___('OldMoney'));
        $form->textarea('source', ___('sourceReason'));
        $form->number('time', ___('Time'));

        return $form;
    }
}
